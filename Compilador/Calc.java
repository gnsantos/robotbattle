/* Generated By:JavaCC: Do not edit this line. Calc.java */
import java.util.Vector;

public class Calc implements CalcConstants {
    static Instrucao[] Prog;                // programa
    static TabSim Nomes  = new TabSim();    // nomes globais
    static TabSim Locais = null;            // nomes locais (ativada dentro de funcao)
    static Computador C  = new Computador();// Maquina virtual
    static int tam = 0;                     // tamanho do programa

    public static void main(String args[]) throws ParseException {
        Calc parser = new Calc(System.in); // cria o compilador
        Prog = parser.Programa();          // compila e retorna o código de maquina
        C.Dump(Prog);                      // imprime o código objeto
//        System.out.println(((Real)C.Roda(Prog)).val()); // roda e mostra o resultado
    }

// Programa é o ponto de partida
  static final public Instrucao[] Programa() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0); // para retornar
    Vector<Instrucao> x = new Vector<Instrucao>(0); // trecho compilado
                                                    // por outras regras

    Instrucao[] a = new Instrucao[0];
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      x = Comando();
                    p.addAll(x); tam = p.size();
    }
    jj_consume_token(0);
        p.add(new RET());        // para garantir que tem um RET
        {if (true) return  p.toArray(a);}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Comando() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    if (jj_2_3(2)) {
      x = Expressao();
      jj_consume_token(7);
                          p.addAll(x);
    } else if (jj_2_4(2)) {
      x = Condicional();
                          p.addAll(x);
    } else if (jj_2_5(2)) {
      x = Laco();
                          p.addAll(x);
    } else if (jj_2_6(2)) {
      x = Funcao();
         p.add(new GOTO(x.size()+1)); // pula a descricao da funcao
         p.addAll(x);
    } else if (jj_2_7(2)) {
      jj_consume_token(8);
      if (jj_2_2(2)) {
        x = Expressao();
                              p.addAll(x);
      } else {
        ;
      }
      jj_consume_token(7);
                                                   p.add(new RET());
    } else if (jj_2_8(2)) {
      jj_consume_token(9);
      x = ListPrint();
                            p.addAll(x);
      jj_consume_token(7);
    } else if (jj_2_9(2)) {
      jj_consume_token(10);
      jj_consume_token(7);
         p.add(new PUSH(new Cadeia("\u005cn")));
         p.add(new PRINT());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// No nivel mais baixo calcula as expressoes lógicas
  static final public Vector<Instrucao> Expressao() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    x = Arit();
                 p.addAll(x);
    label_2:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_11(2)) {
        jj_consume_token(11);
        x = Arit();
                      p.addAll(x); p.add(new MENORIGUAL());
      } else if (jj_2_12(2)) {
        jj_consume_token(12);
        x = Arit();
                      p.addAll(x); p.add(new MAIORIGUAL());
      } else if (jj_2_13(2)) {
        jj_consume_token(13);
        x = Arit();
                      p.addAll(x); p.add(new DIFERENTE());
      } else if (jj_2_14(2)) {
        jj_consume_token(14);
        x = Arit();
                      p.addAll(x); p.add(new IGUAL());
      } else if (jj_2_15(2)) {
        jj_consume_token(15);
        x = Arit();
                      p.addAll(x); p.add(new MENOR());
      } else if (jj_2_16(2)) {
        jj_consume_token(16);
        x = Arit();
                      p.addAll(x); p.add(new MAIOR());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Artiméticas
  static final public Vector<Instrucao> Arit() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    x = Termo();
                  p.addAll(x);
    label_3:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_3;
      }
      if (jj_2_18(2)) {
        jj_consume_token(17);
        x = Termo();
                      p.addAll(x); p.add(new SOMA());
      } else if (jj_2_19(2)) {
        jj_consume_token(18);
        x = Termo();
                      p.addAll(x); p.add(new SUB());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Termo() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    x = Fator();
                  p.addAll(x);
    label_4:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_21(2)) {
        jj_consume_token(19);
        x = Fator();
                      p.addAll(x); p.add(new MULT());
      } else if (jj_2_22(2)) {
        jj_consume_token(20);
        x = Fator();
                      p.addAll(x); p.add(new DIV());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Fator() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Simbolo v;
    if (jj_2_23(2)) {
      x = Chamada();
                                 // Chamada de funcao
        p.addAll(x);
        {if (true) return p;}
    } else if (jj_2_24(2)) {
      // Atribuicao
           t = jj_consume_token(ID);
      jj_consume_token(21);
      x = Expressao();
        p.addAll(x);
        p.add(new DUP());        // deixa uma cópia na pilha

        // Verifica se estamos dentro de uma funcao
        if ((Locais != null) && Locais.exists(t.image)) {
            v = Locais.get(t.image);
            p.add(new SETLV(v.pos));
         }
        else if (Nomes.exists(t.image)) { // existe como global?
            v = Nomes.get(t.image);
            if (v instanceof Variavel)
                p.add(new SETV(v.pos));
            else p.add(new PRINT()); // colocar erro de compilacao aqui
        }
        else {                    // cria local ou global, de acordo
            v = new Variavel();
            if (Locais != null) { // dentro de funcao -> local
                Locais.add(t.image,v);
                p.add(new SETLV(v.pos));
            }
            else {                // global
                Nomes.add(t.image,v);
                p.add(new SETV(v.pos));
            }
        }
        {if (true) return p;}
    } else if (jj_2_25(2)) {
      t = jj_consume_token(ID);
                                // variavel, tratamento similar ao de cima
        if ((Locais != null) && Locais.exists(t.image)) {
            v = Locais.get(t.image);
            p.add(new PUSHLV(v.pos));
         }
        else if (Nomes.exists(t.image)) {
            v = Nomes.get(t.image);
            if (v instanceof Variavel)
                p.add(new PUSHV(v.pos));
            else p.add(new PRINT()); // colocar erro de compilacao aqui
        }
         else {
             // Variavel nao inicializada
             v = new Variavel();
            p.add(new PUSH(new Real(0)));
            p.add(new DUP());
            if (Locais != null) {
                Locais.add(t.image,v);
                p.add(new SETLV(v.pos));
            }
            else {
                Nomes.add(t.image,v);
                p.add(new SETV(v.pos));
            }
         }
        {if (true) return p;}
    } else if (jj_2_26(2)) {
      t = jj_consume_token(NUM);
        p.add(new PUSH(new Real(Double.parseDouble(t.image))));
        {if (true) return p;}
    } else if (jj_2_27(2)) {
      jj_consume_token(22);
      x = Expressao();
      jj_consume_token(23);
        p.addAll(x);
        {if (true) return p;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Condicional() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    int delta, pos;
    if (jj_2_28(2)) {
      jj_consume_token(24);
    } else if (jj_2_29(2)) {
      jj_consume_token(25);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(22);
    x = Expressao();
                       p.addAll(x);
    jj_consume_token(23);
    if (jj_2_30(2)) {
      jj_consume_token(26);
    } else if (jj_2_31(2)) {
      jj_consume_token(27);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    x = Bloco();
        delta = x.size();
        pos = p.size(); // para arrumar no else, se preciso
        p.add(new ZERO(delta+1));
        p.addAll(x);
        //        return p;

    if (jj_2_34(2)) {
      if (jj_2_32(2)) {
        jj_consume_token(28);
      } else if (jj_2_33(2)) {
        jj_consume_token(29);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      x = Bloco();
         p.set(pos, new ZERO(delta+2)); // pula o GOTO
         delta = x.size();
         p.add(new GOTO(delta+1));
         p.addAll(x);
    } else {
      ;
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Laco() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    int exp, delta;
    if (jj_2_35(2)) {
      jj_consume_token(30);
    } else if (jj_2_36(2)) {
      jj_consume_token(31);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(22);
    x = Expressao();
        exp = x.size();
        p.addAll(x);
    jj_consume_token(23);
    if (jj_2_37(2)) {
      jj_consume_token(32);
    } else if (jj_2_38(2)) {
      jj_consume_token(33);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    x = Bloco();
        delta = x.size()+1;
        p.add(new ZERO(delta+1));
        p.addAll(x);
        p.add(new GOTO(-(delta+exp)));
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Instrucao> Bloco() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    jj_consume_token(34);
    label_5:
    while (true) {
      if (jj_2_39(2)) {
        ;
      } else {
        break label_5;
      }
      x = Comando();
                        p.addAll(x);
    }
    jj_consume_token(35);
                                               {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Definicao de funcao
  static final public Vector<Instrucao> Funcao() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Funcao v;
    String nome;
    TabSim Lorig;
    jj_consume_token(36);
    t = jj_consume_token(ID);
                                   // t.image contém o nome
        if (Nomes.exists(nome = t.image)) { // ja foi definida?
            v = (Funcao)Nomes.get(nome);
            // Isto NaO é um tratamento de erro decente!!!!!
            // Melhore
            p.add(new PUSH(new Cadeia("Nome ja usado:" + nome)));
            p.add(new PRINT());
        }
        else {                    // cria a funcao
            v = new Funcao(tam+1);
            Nomes.add(nome,v);
        }
        Lorig = Locais;         // guarda a tabela de simbolos locais
                                // (isso permite definicoes encaixadas,
                                // apesar do escopo de funcao ser
                                // global)
        Locais = v.Vars;
    jj_consume_token(22);
    if (jj_2_40(2)) {
      Args(nome,v);
    } else {
      ;
    }
    jj_consume_token(23);
    // lista de argumentos
        x = Bloco();
        p.addAll(x);
        p.add(new RET());       // garante RET
        Locais = Lorig;         // restaura tabela de simbolos
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Argumentos
  static final public void Args(String fnom, Funcao v) throws ParseException {
    Arg(fnom,v);
    label_6:
    while (true) {
      if (jj_2_41(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(37);
      Arg(fnom,v);
    }
  }

// Um argumento
  static final public void Arg(String fnom, Funcao f) throws ParseException {
    Token t;
    t = jj_consume_token(ID);
        if (!f.exists(t.image)){
            f.addarg(t.image);
        }
  }

// Chamada de funcao
  static final public Vector<Instrucao> Chamada() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Funcao f;
    Endereco e;
    String nome;
    TabSim Lorig;
    t = jj_consume_token(ID);
                                    // nome da funcao
        if (Nomes.exists(nome = t.image)) {
            f = (Funcao) Nomes.get(t.image);    // Aqui gera erro se nao for funcao
            e = f.pos;
        }
        else {
            e  = new Endereco(-1);  //MUITO ARRISCADO!!!! Colete os
                                    //pontos na tabela de simbolos e
                                    //corrija os pontos depois
            f = new Funcao(0);
            System.out.println("Erro no uso de "+nome);
        }
        Lorig = Locais;             // disponibiliza o nome dos argumentos
        Locais = f.Vars;
    jj_consume_token(22);
    x = ListParms(f);
                        p.addAll(x);
    jj_consume_token(23);
        p.add(new CALL(e));         // chama
        Locais = Lorig;             // restaura
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Parâmetros
  static final public Vector<Instrucao> ListParms(Funcao f) throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    int n = 0;
    String pnom;
    Variavel v;
    x = Parm(f,n++);
                     p.addAll(x);
    label_7:
    while (true) {
      if (jj_2_42(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(37);
      x = Parm(f,n++);
                      p.addAll(x);
    }
        p.add(new ENTRA());        // novo contexto
        // populando
        for (int i = n-1; i >=0 ; i--) {
            pnom = f.getarg(i);

            if (!Locais.exists(pnom)){
                // adiciona na tabela quando usada
                v = new Variavel();
                Locais.add(pnom,v);
            }
            v = (Variavel) Locais.get(pnom);

            p.add(new SETLV(v.pos));
        }
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Um argumento
  static final public Vector<Instrucao> Parm(Funcao f, int n) throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    x = Expressao();
        p.addAll(x);
        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Lista para impressao
  static final public Vector<Instrucao> ListPrint() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    x = ItemPrint();
        p.addAll(x);
    label_8:
    while (true) {
      if (jj_2_43(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(37);
      x = ItemPrint();
         p.addAll(x);
    }
      {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// Um item a ser impresso
  static final public Vector<Instrucao> ItemPrint() throws ParseException {
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    if (jj_2_44(2)) {
      x = Expressao();
         p.addAll(x);
         p.add(new PRINT());
    } else if (jj_2_45(2)) {
      t = jj_consume_token(STRING_LITERAL);
         String s =  t.image;
         while (s.contains("\u005c\u005cn"))
             s = s.replace("\u005c\u005cn","\u005cn");
         while (s.contains("\u005c\u005ct"))
             s = s.replace("\u005c\u005ct", "\u005ct");
         while (s.contains("\u005c\u005cb"))
             s = s.replace("\u005c\u005cb", "\u005cb");
         while (s.contains("\u005c\u005cr"))
             s = s.replace("\u005c\u005cr", "\u005cr");
         while (s.contains("\u005c\u005cf"))
             s = s.replace("\u005c\u005cf", "\u005cf");
         while (s.contains("\u005c\u005c\u005c\u005c"))
             s = s.replace("\u005c\u005c\u005c\u005c", "\u005c\u005c");

         p.add(new PUSH(new Cadeia(s.substring(1,s.length()-1))));
         p.add(new PRINT());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(10)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(9)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(8)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(22)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    if (jj_scan_token(22)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(21)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(19)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    if (jj_scan_token(22)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(17)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(16)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(14)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(12)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(11)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalcTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[45];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Calc(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calc(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalcTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Calc(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalcTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Calc(CalcTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalcTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 45; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

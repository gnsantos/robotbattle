options {
    IGNORE_CASE = true;
    LOOKAHEAD   = 2;        // para eliminar conflitos
}

// Descricao da classe Calc
PARSER_BEGIN(Calc)
import java.util.Vector;

public class Calc {
    static Instrucao[] Prog;                // programa
    static TabSim Nomes  = new TabSim();    // nomes globais
    static TabSim Locais = null;            // nomes locais (ativada dentro de funcao)
    static Computador C  = new Computador();// Maquina virtual
    static int tam = 0;                     // tamanho do programa

    public static void main(String args[]) throws ParseException {
        Calc parser = new Calc(System.in); // cria o compilador
        Prog = parser.Programa();          // compila e retorna o código de maquina
        C.Dump(Prog);                      // imprime o código objeto
//        System.out.println(((Real)C.Roda(Prog)).val()); // roda e mostra o resultado
    }
}

PARSER_END(Calc)

// Pula espaco em branco e comentarios
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Programa é o ponto de partida
Instrucao[] Programa() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0); // para retornar
    Vector<Instrucao> x = new Vector<Instrucao>(0); // trecho compilado
                                                    // por outras regras

    Instrucao[] a = new Instrucao[0]; // auxiliar
}
{
    (
     x = Comando() {p.addAll(x); tam = p.size();}
     )*
    <EOF> {
        p.add(new RET());        // para garantir que tem um RET
        return  p.toArray(a);
    }
}

Vector<Instrucao> Comando() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
}
{
    (
     x = Expressao() ";" {p.addAll(x);}
     |
     x = Condicional()   {p.addAll(x);}
     |
     x = Laco()          {p.addAll(x);}
     |
     x = Funcao()         {
         p.add(new GOTO(x.size()+1)); // pula a descricao da funcao
         p.addAll(x);
     }
     | 
     "return" (x=Expressao() {p.addAll(x);})? ";" {p.add(new RET());}
     |
     "print" x=ListPrint() {p.addAll(x);} ";"
     |
     "println" ";"{
         p.add(new PUSH(new Cadeia("\n")));
         p.add(new PRINT());
     }
     ) {return p;}
}

// No nivel mais baixo calcula as expressoes lógicas
Vector<Instrucao> Expressao() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{   
    x = Arit() { p.addAll(x); }
    (
     "<=" x = Arit() {p.addAll(x); p.add(new MENORIGUAL());}
     |
     ">=" x = Arit() {p.addAll(x); p.add(new MAIORIGUAL());}
     |
     "!=" x = Arit() {p.addAll(x); p.add(new DIFERENTE());}
     |
     "==" x = Arit() {p.addAll(x); p.add(new IGUAL());}
     |
     "<"  x = Arit() {p.addAll(x); p.add(new MENOR());}
     |
     ">"  x = Arit() {p.addAll(x); p.add(new MAIOR());}
     )* {return p;}
}

Vector<Instrucao> SysCall() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Token u;
}
{
    "["
    u = <CHAMADA>
    (
    t = <DIRECAO>
    |
    t = <QUESTION>
    )
    {p.add(SYSCALL.newSyscall(u.image, t.image));}        
    "]" {return p;}
}


// Artiméticas
Vector<Instrucao> Arit() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{
    x = Termo() { p.addAll(x); }
    (
     "+" x = Termo() {p.addAll(x); p.add(new SOMA());}
     |
     "-" x = Termo() {p.addAll(x); p.add(new SUB());}
     )* {return p;}
}

Vector<Instrucao> Termo() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{
    x = Fator() { p.addAll(x); }
    (
     "*" x = Fator() {p.addAll(x); p.add(new MULT());}
     |
     "/" x = Fator() {p.addAll(x); p.add(new DIV());}
     )* {return p;}
}

Vector<Instrucao> Fator() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Simbolo v;
}
{
    x=Chamada() {                // Chamada de funcao
        p.addAll(x); 
        return p;
    }
|                                // Atribuicao
     t=<ID> "=" x=Expressao() {    
        p.addAll(x);
        p.add(new DUP());        // deixa uma cópia na pilha

        // Verifica se estamos dentro de uma funcao
        if ((Locais != null) && Locais.exists(t.image)) {
            v = Locais.get(t.image);
            p.add(new SETLV(v.pos));
         }
        else if (Nomes.exists(t.image)) { // existe como global?
            v = Nomes.get(t.image);
            if (v instanceof Variavel)
                p.add(new SETV(v.pos));
            else p.add(new PRINT()); // colocar erro de compilacao aqui
        }
        else {                    // cria local ou global, de acordo
            v = new Variavel();
            if (Locais != null) { // dentro de funcao -> local
                Locais.add(t.image,v);
                p.add(new SETLV(v.pos));
            }
            else {                // global
                Nomes.add(t.image,v);
                p.add(new SETV(v.pos));
            }
        }
        return p;
    }
    |
    t=<ID> {                    // variavel, tratamento similar ao de cima
        if ((Locais != null) && Locais.exists(t.image)) {
            v = Locais.get(t.image);    
            p.add(new PUSHLV(v.pos));
         }
        else if (Nomes.exists(t.image)) {
            v = Nomes.get(t.image);
            if (v instanceof Variavel)
                p.add(new PUSHV(v.pos));
            else p.add(new PRINT()); // colocar erro de compilacao aqui
        }
         else {
             // Variavel nao inicializada
             v = new Variavel();
            p.add(new PUSH(new Real(0)));
            p.add(new DUP());
            if (Locais != null) {
                Locais.add(t.image,v);
                p.add(new SETLV(v.pos));
            }
            else {
                Nomes.add(t.image,v);
                p.add(new SETV(v.pos));
            }
         }
        return p;
    }
|
    t=<NUM> {
        p.add(new PUSH(new Real(Double.parseDouble(t.image)))); 
        return p;
    }
|
    "(" x = Expressao() ")"    {
        p.addAll(x); 
        return p;
    }
|
    x = SysCall() {p.addAll(x); return p;}

}

Vector<Instrucao> Condicional() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    int delta, pos;
}
{
    ("if" | "se") 
    "(" 
        x=Expressao() {p.addAll(x);} 
    ")" 
    ("then" | "entao")
    x = Bloco() {
        delta = x.size(); 
        pos = p.size(); // para arrumar no else, se preciso
        p.add(new ZERO(delta+1)); 
        p.addAll(x); 
        //        return p;
    }
    ( 
     ("else" | "senao" )
     x = Bloco() {
         p.set(pos, new ZERO(delta+2)); // pula o GOTO
         delta = x.size();
         p.add(new GOTO(delta+1));
         p.addAll(x);
     } 
      )?
        { return p; }
}

Vector<Instrucao> Laco() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    int exp, delta;
}
{
    ( "while" | "enquanto" )
    "("x = Expressao() {
        exp = x.size(); 
        p.addAll(x);
    }
    ")" 
    ( "do" | "faca" ) 
      x = Bloco() {
        delta = x.size()+1; 
        p.add(new ZERO(delta+1));
        p.addAll(x);
        p.add(new GOTO(-(delta+exp)));
        return p;
    }
}

Vector<Instrucao> Bloco() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{
    "{" ( x=Comando() { p.addAll(x); } )* "}" {return p;}
      
}

// Definicao de funcao
Vector<Instrucao> Funcao() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Funcao v;
    String nome;
    TabSim Lorig;
}
{
    "func" t=<ID> {                // t.image contém o nome
        if (Nomes.exists(nome = t.image)) { // ja foi definida?
            v = (Funcao)Nomes.get(nome);
            // Isto NaO é um tratamento de erro decente!!!!!
            // Melhore
            p.add(new PUSH(new Cadeia("Nome ja usado:" + nome)));
            p.add(new PRINT());
        }
        else {                    // cria a funcao
            v = new Funcao(tam+1);
            Nomes.add(nome,v);
        }
        Lorig = Locais;         // guarda a tabela de simbolos locais
                                // (isso permite definicoes encaixadas,
                                // apesar do escopo de funcao ser
                                // global)
        Locais = v.Vars;
    }
    "(" (Args(nome,v))? ")"     // lista de argumentos
    x=Bloco()                   // corpo
    {
        p.addAll(x); 
        p.add(new RET());       // garante RET
        Locais = Lorig;         // restaura tabela de simbolos
        return p;
    }
}

// Argumentos
void Args(String fnom, Funcao v) :
{
}
{
    Arg(fnom,v)    ( ","     Arg(fnom,v) )*
}

// Um argumento
void Arg(String fnom, Funcao f) :
{
    Token t;
}
{
    t=<ID> {
        if (!f.exists(t.image)){
            f.addarg(t.image);
        }
    }
}

// Chamada de funcao
Vector<Instrucao> Chamada() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    Funcao f;
    Endereco e;
    String nome;
    TabSim Lorig;
}
{
    t=<ID> {                        // nome da funcao
        if (Nomes.exists(nome = t.image)) {
            f = (Funcao) Nomes.get(t.image);    // Aqui gera erro se nao for funcao
            e = f.pos;
        }
        else { 
            e  = new Endereco(-1);  //MUITO ARRISCADO!!!! Colete os
                                    //pontos na tabela de simbolos e
                                    //corrija os pontos depois
            f = new Funcao(0);
            System.out.println("Erro no uso de "+nome);
        }
        Lorig = Locais;             // disponibiliza o nome dos argumentos
        Locais = f.Vars;
    }
    "("
        x=ListParms(f) {p.addAll(x);}   // lista de parâmetros
    ")" 
    {
        p.add(new CALL(e));         // chama
        Locais = Lorig;             // restaura
        return p;
    }
}

// Parâmetros
Vector<Instrucao> ListParms(Funcao f) :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
    int n = 0;
    String pnom;
    Variavel v;
}
{
    x = Parm(f,n++) {p.addAll(x); } // compila cada argumento
    
    (
     ","
     x = Parm(f,n++) {p.addAll(x);}
    )*
    { 
        p.add(new ENTRA());        // novo contexto
        // populando
        for (int i = n-1; i >=0 ; i--) {
            pnom = f.getarg(i);
            
            if (!Locais.exists(pnom)){
                // adiciona na tabela quando usada
                v = new Variavel();
                Locais.add(pnom,v);
            }
            v = (Variavel) Locais.get(pnom);
            
            p.add(new SETLV(v.pos));
        }
        return p;
    }
}

// Um argumento
Vector<Instrucao> Parm(Funcao f, int n) :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{
    x = Expressao() {
        p.addAll(x);
        return p;
    }
    
}

// Lista para impressao
Vector<Instrucao> ListPrint() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
}
{
    x=ItemPrint() {
        p.addAll(x);
    }
    
    (
     ","
     x=ItemPrint() {
         p.addAll(x);
     }
    )*
    { return p;}
}

// Um item a ser impresso
Vector<Instrucao> ItemPrint() :
{
    Vector<Instrucao> p = new Vector<Instrucao>(0);
    Vector<Instrucao> x = new Vector<Instrucao>(0);
    Token t;
}
{
    (
     x=Expressao() {
         p.addAll(x);
         p.add(new PRINT());
     }
     |
     t=<STRING_LITERAL> {
         String s =  t.image;
         while (s.contains("\\n"))
             s = s.replace("\\n","\n");
         while (s.contains("\\t"))
             s = s.replace("\\t", "\t");
         while (s.contains("\\b"))
             s = s.replace("\\b", "\b");
         while (s.contains("\\r"))
             s = s.replace("\\r", "\r");
         while (s.contains("\\f"))
             s = s.replace("\\f", "\f");
         while (s.contains("\\\\"))
             s = s.replace("\\\\", "\\");

         p.add(new PUSH(new Cadeia(s.substring(1,s.length()-1))));
         p.add(new PRINT());
     }
    )
    { return p;}
}

// Definicao dos tokens
TOKEN :
{
 < NUM: ( ["0"-"9"] )+ >
|       // Possíveis perguntas a serem feitas pela syscall ASK
 <QUESTION: "Health" | "Crystals" | "Is_in_enemy_base" | "Enemy_base_distance" | "Base_distance" > 
|       // Possíveis syscalls
 <CHAMADA: "WALK" | "FIRE" | "BOMB" | "TAKE" | "DROP" | "LOOK" | "ASK">
|       // Possíveis direções a serem passadas para determinadas syscalls
 <DIRECAO: "East" | "West" | "Southwest" | "Southeast" | "Northeast" | "Northwest" >
|
 < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9","@"] )* >
|
 <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}


